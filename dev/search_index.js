var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Loading-COLMAP-dataset","page":"API","title":"Loading COLMAP dataset","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"GaussianSplatting.jl supports datasets in binary COLMAP format. To load it, you specify which GPU backend to use and a path to the dataset root directory.","category":"page"},{"location":"api/","page":"API","title":"API","text":"import GaussianSplatting as GPS\n\nkab = GSP.gpu_backend()\ndataset_path = \"<path-to-colmap-dataset>\"\ndataset = GSP.ColmapDataset(kab, dataset_path;\n    scale=4, train_test_split=0.9, permute=true)","category":"page"},{"location":"api/","page":"API","title":"API","text":"scale::Int = 1 controls the scale of images to load (usually between 1 an 8).\ntrain_test_split::Real = 0.8 train/test ratio split.   E.g. 0.8 will select 80% of the data for training and 20% for testing.\npermute::Bool = true whether to shuffle data in a random order.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Dataset directory should have the following structure:","category":"page"},{"location":"api/","page":"API","title":"API","text":"- sparse/0/cameras.bin\n- sparse/0/images.bin\n- sparse/0/points3D.bin\n- images/","category":"page"},{"location":"api/","page":"API","title":"API","text":"Additionally, if setting scale > 1, following directories should exist:","category":"page"},{"location":"api/","page":"API","title":"API","text":"- images_<scale>/","category":"page"},{"location":"api/#Initializing-Gaussians-from-dataset","page":"API","title":"Initializing Gaussians from dataset","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Once you load the dataset, you can initialize Gaussian model from it by providing an array of points (means), their colors and scales.","category":"page"},{"location":"api/","page":"API","title":"API","text":"gaussians = GSP.GaussianModel(\n    dataset.points, dataset.colors, dataset.scales;\n    max_sh_degree=3)","category":"page"},{"location":"api/","page":"API","title":"API","text":"max_sh_degree::Int = 3 set the maximum allowed spherical-harmonics degree.   For a given degree d, each gaussian will have (d + 1)^2 color features.   Set 0 to disable it. This will be used by during training to limit   current spherical-harmonics degree.","category":"page"},{"location":"api/#Rendering-Gaussians","page":"API","title":"Rendering Gaussians","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"To render Gaussians, we first need to initialize rasterizer on the given GPU backend:","category":"page"},{"location":"api/","page":"API","title":"API","text":"kab = GSP.gpu_backend()\nrasterizer = GSP.GaussianRasterizer(kab; width=1280, height=720, mode=:rgb)","category":"page"},{"location":"api/","page":"API","title":"API","text":"width::Int and height::Int control the rendering resolution of the   rasterizer.\nmode::Symbol = :rgb set the rendering mode.   Either :rgb or :rgbd (RGB + depth) is supported for now.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Once constructed, we can rasterize gaussians onto the image plane given camera that determines the position from which to render:","category":"page"},{"location":"api/","page":"API","title":"API","text":"image_features = rasterizer(\n    gaussians.points, gaussians.opacities, gaussians.scales,\n    gaussians.rotations, gaussians.features_dc, gaussians.features_rest;\n    camera, gaussians.sh_degree)","category":"page"},{"location":"api/","page":"API","title":"API","text":"Depending on the mode, image_features will be either in 3xWxH shape (:rgb mode) or in 4xWxH (:rgbd mode).","category":"page"},{"location":"api/","page":"API","title":"API","text":"We can save it to disk (first transferring it from GPU to host):","category":"page"},{"location":"api/","page":"API","title":"API","text":"using FileIO, ImageIO\n\nhost_image_features = Array(image_features)\nsave(\"image.png\", GSP.to_image(@view(host_image_features[1:3, :, :])))","category":"page"},{"location":"api/","page":"API","title":"API","text":"Example of rendering newly initialized gaussians (bicycle dataset):","category":"page"},{"location":"api/","page":"API","title":"API","text":"(Image: )","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"#GaussianSplatting.jl","page":"Home","title":"GaussianSplatting.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Gaussian Splatting algorithm in pure Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia 1.10 or higher.\nAMD (AMDGPU.jl) or Nvidia (CUDA.jl) capable machine.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Add GaussianSplatting.jl package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/JuliaNeuralGraphics/GaussianSplatting.jl.git","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GaussianSplatting.jl comes with a GUI application to train & view the gaussians.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Add necessary packages:\n] add AMDGPU      # for AMD GPU\n] add CUDA, cuDNN # for Nvidia GPU\n] add Flux\nRun:\njulia> using AMDGPU      # for AMD GPU\njulia> using CUDA, cuDNN # for Nvidia GPU\njulia> using Flux, GaussianSplatting\n\njulia> GaussianSplatting.gui(\"path-to-colmap-dataset-directory\"; scale=1)","category":"page"},{"location":"#GPU-selection","page":"Home","title":"GPU selection","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is required only the first time per the environment. After selecting GPU backend, restart Julia REPL.","category":"page"},{"location":"","page":"Home","title":"Home","text":"AMD GPU:\njulia> Flux.gpu_backend!(\"AMDGPU\")\nNvidia GPU:\njulia> Flux.gpu_backend!(\"CUDA\")","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"3D Gaussian Splatting for Real-Time Radiance Field Rendering: https://arxiv.org/abs/2308.04079\ngsplat: https://github.com/nerfstudio-project/gsplat","category":"page"}]
}
